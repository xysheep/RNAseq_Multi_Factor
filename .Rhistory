source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(c('gage','preprocessCore','GenomicAlignments','DESeq2','Rtsne','colorRamps','RColorBrewer','org.Hs.eg.db','annotate','pathview','rtracklayer'))
library(gage)
library(preprocessCore)
library(GenomicAlignments)
library(DESeq2)
library(Rtsne)
library(colorRamps)
library("RColorBrewer")
library(org.Hs.eg.db)
library(annotate)
library(pathview)
library(rtracklayer)
setwd('C:/Users/xyang88/OneDrive/MyProject/RNAseq_CATTILL')
#setwd('C:/Users/xyshe/OneDrive/MyProject/RNAseq_CATTILL')
source('func_RNAseq_report.R')
source('makedb.R')
setwd("C:/Users/xysheep/OneDrive/MyProject/RNAseq_share")
source('func_RNAseq_report.R')
source('makedb.R')
load('TILCnt.RData')
d = assay(gnCnt)
d = d[rowSums(d)>1,]
# Combine technical replication separately
shortd = d[,1:12]
for (i in 1:12){
shortd[,i] = rowSums(d[,((i-1)*4+1):(i*4)],na.rm=T)
}
subtype = paste('Sub',rep(c(1,2),6),sep='')
donor = paste('Donor',rep(1:6,rep(2,6)),sep='')
responder = character(12)
responder[c(1,2,5,6,9,10)] = 'yes';responder[-c(1,2,5,6,9,10)] = 'no'
colnames(shortd) = paste(subtype,donor,sep='_')
subtype
donor
responder
c=read.csv('design.csv')
c
?read.csv
c=read.csv('design.csv',header=T)
c
dds1 <- analysis_deg(shortd,subtype,donor)
colData(dds1)
coldata <- read.csv('design.csv',header=T)
coldata
coldata <- read.csv('design.csv',header=T)
coldata
coldata <- read.csv('design.csv',header=T)
coldata <- read.csv('design.csv',header=T)
dds1 <- DESeqDataSetFromMatrix(cnts, colData=coldata, design = ~ subtype + donor)
dds1<-DESeq(dds1)
rsub <- results(dds1,contrast=c('subtype','Sub1','Sub2'))
rsub
dds2 <- DESeqDataSetFromMatrix(cnts, colData=coldata, design = ~ subtype + responder)
dds2<-DESeq(dds2)
rresp <- results(dds2,contrast=c('responder','yes','no'))
dds2 <- DESeqDataSetFromMatrix(cnts, colData=coldata, design = ~ subtype + responder)
dds2 <- DESeqDataSetFromMatrix(cnts, colData=coldata, design = ~ subtype + responder)
dds2 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + responder)
dds1 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + donor)
coldata <- factor(read.csv('design.csv',header=T)) # prepare a design table
coldata <- read.csv('design.csv',header=T)# prepare a design table
coldata
dds1 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + donor)
shortd
head(shortd)
dds1 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + donor)
coldata
DataFrame(coldata)
coldata <- DataFrame(read.csv('design.csv',header=T))# prepare a design table
dds1 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + donor)
coldata
load('TILCnt.RData')
d = assay(gnCnt)
d = d[rowSums(d)>1,]
# Combine technical replication separately
shortd = d[,1:12]
for (i in 1:12){
shortd[,i] = rowSums(d[,((i-1)*4+1):(i*4)],na.rm=T)
}
dds1 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + donor)
dds1 <- DESeqDataSetFromMatrix(shortd, colData=coldata, design = ~ subtype + donor)
dds1<-DESeq(dds1)
coldata[subtype=='Sub1',]
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
dds_rnor <- DESeqDataSetFromMatrix(shortd[,subtype=='Sub1'],
colData=coldata[subtype=='Sub1',], design = ~ responder)
dds_rnor<-DESeq(dds_rnor)
rrnor <- results(dds_rnor)
dds_rnor <- DESeqDataSetFromMatrix(shortd[,coldata$subtype=='Sub1'],
colData=coldata[coldata$subtype=='Sub1',], design = ~ responder)
dds_rnor<-DESeq(dds_rnor)
rrnor <- results(dds_rnor)
l=list(rresp)
l[[2]]=rrnor
l
length(L)
length(l)
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
for (i in 1:length(q)){
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
}
outnames[i]
i
for (i in 1:length(q)){
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
}
for (i in 1:length(q)){
pdf(paste(outnames[i],'pdf',sep='.'))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
paste(outdir,outnames[i],'.pdf',sep='')
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
coldata
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
#setwd('C:/Users/xyang88/OneDrive/MyProject/RNAseq_CATTILL')
#setwd('C:/Users/xyshe/OneDrive/MyProject/RNAseq_CATTILL')
source('func_RNAseq_report.R')
source('makedb.R')
fdr = 0.1
outdir<-"./output_TIL/"
outnames<-c('Sub1 vs. Sub2','Responder vs. non-responder','Responder vs. non-responder on sub1')
load('Cnt.RData')
d = assay(gnCnt)
d = d[rowSums(d)>1,]
head(d)
names(d)
colname(d)
`colnames<-`(d)
colnames(d)
d = assay(gnCnt)
d = d[rowSums(d)>1,]
# Combine technical replication separately
# if no technical replication, no need to run the following 5 lines.
shortd = d[,1:12]
for (i in 1:12){
shortd[,i] = rowSums(d[,((i-1)*4+1):(i*4)],na.rm=T)
}
d=shortd
colnames(d)
d = assay(gnCnt)
d = d[rowSums(d)>1,]
dim(d)
shortd = d[,1:12]
for (i in 1:12){
shortd[,i] = rowSums(d[,((i-1)*4+1):(i*4)],na.rm=T)
}
d=shortd
dim(d)
a-1
a=1
a
b=c(1,2,3,4,5)
b
b=c('xingyu','ankit','melisa','gabriell')
b=c('xingyu','ankit','melisa','gabrielle')
b
#setwd('C:/Users/xyang88/OneDrive/MyProject/RNAseq_CATTILL')
#setwd('C:/Users/xyshe/OneDrive/MyProject/RNAseq_CATTILL')
source('func_RNAseq_report.R')
source('makedb.R')
# Change the following code to whatever you like
# Below: where to put the output. Remember the "/" at last
outdir<-"./output_TIl/"
# Below: Prefix of output files names.
# Below: This example has three elements, if you have more comparison, you can add more
outnames<-c('Sub1 vs. Sub2','Sub1 vs. Sub3','Responder vs. non-responder','Donor1 vs. Donor2')
fdr = 0.1
source('Analysis1_DEG.R')
#setwd('C:/Users/xyang88/OneDrive/MyProject/RNAseq_CATTILL')
#setwd('C:/Users/xyshe/OneDrive/MyProject/RNAseq_CATTILL')
source('func_RNAseq_report.R')
source('makedb.R')
# Change the following code to whatever you like
# Below: where to put the output. Remember the "/" at last
outdir<-"./output_TIl/"
# Below: Prefix of output files names.
# Below: This example has three elements, if you have more comparison, you can add more
outnames<-c('Sub1 vs. Sub2','Sub1 vs. Sub3','Responder vs. non-responder','Donor1 vs. Donor2')
source('Analysis1_DEG.R')
length（q）
length（q）
q
q[[1]]
head(q[[1]])
length(q)
head(q[[1]])
fdr = 0.1
source('Analysis2_Overlap.R')
source('Analysis2_Overlap.R')
source('output.R')
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
setwd('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share')
source('func_RNAseq_report.R')
source('makedb.R')
source('makedb.R')
source('func_RNAseq_report.R')
source('makedb.R')
setwd('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share')
source('func_RNAseq_report.R')
source('makedb.R')
# Change the following code to whatever you like
# Below: where to put the output. Remember the "/" at last
outdir<-"./output_TIl/"
# Below: Prefix of output files names.
# Below: This example has three elements, if you have more comparison, you can add more
outnames<-c('Sub1 vs. Sub2','Responder vs. non-responder','Responder vs. non-responder on sub1 ')
source('Analysis1_DEG.R')
coldata
dds1 <- DESeqDataSetFromMatrix(d, colData=coldata, design = subtype + donor)
source('Analysis1_DEG.R')
outdir_glist<-paste("./preranked_genelist/")
dir.create(outdir_glist,showWarnings=FALSE)
for (i in 1:length(q)){
d=cbind(id2symbols,data.frame(score[[i]]))
write.table(d,paste(outdir_glist,
paste('Ranked_Gene_List',outnames[i],'.rnk'),
sep=''),row.names=F,col.names=F,sep='\t',quote=F)
}
source('output.R')
source('make_preranked.R')
outdir_glist<-paste("./preranked_genelist/up")
dir.create(outdir_glist,showWarnings=FALSE)
dir.create(outdir_glist,showWarnings=FALSE)
?dir.create
dir.create(outdir_glist,showWarnings=FALSE,recursive = T)
outdir_glist<-paste("./preranked_genelist/up")
dir.create(outdir_glist,showWarnings=FALSE,recursive = T)
for (i in 1:length(q)){
d=cbind(id2symbols,data.frame(score[[i]]))
write.table(d,paste(outdir_glist,
paste('Ranked_Gene_List',outnames[i],'.rnk'),
sep=''),row.names=F,col.names=F,sep='\t',quote=F)
}
outdir_glist<-paste("./preranked_genelist/down")
dir.create(outdir_glist,showWarnings=FALSE)
for (i in 1:length(q)){
d=cbind(id2symbols,data.frame(score[[i]]))
write.table(d,paste(outdir_glist,
paste('Ranked_Gene_List',outnames[i],'.rnk'),
sep=''),row.names=F,col.names=F,sep='\t',quote=F)
}
outdir_glist<-paste("./preranked_genelist/up")
dir.create(outdir_glist,showWarnings=FALSE,recursive = T)
for (i in 1:length(q)){
d=cbind(id2symbols,data.frame(score[[i]]))
write.table(d,paste(outdir_glist,
paste('Ranked_Gene_List',outnames[i],'.rnk'),
sep=''),row.names=F,col.names=F,sep='\t',quote=F)
}
outdir_glist<-paste("./preranked_genelist/down")
dir.create(outdir_glist,showWarnings=FALSE)
for (i in 1:length(q)){
d=cbind(id2symbols,data.frame(-score[[i]]))
write.table(d,paste(outdir_glist,
paste('Ranked_Gene_List',outnames[i],'.rnk'),
sep=''),row.names=F,col.names=F,sep='\t',quote=F)
}
tmpoutdir
dir.create(tmpoutdir,showWarnings=FALSE)
tmpoutdir = paste(outdir,'KEGG',outnames[i],sep='/')
tmpoutdir
dir.create(tmpoutdir,showWarnings=FALSE,recursive = T)
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
outdir_glist<-paste(outdir,"preranked_genelist/down")
outdir_glist
coldata
colnames(norm_cnts) = rownames(coldata)
head(norm_cnts)
load('TILCnt.RData')
head(gnCnt)
head(assay(gnCnt))
load('CARCnt.RData')
head(assay(gnCnt))
colnames(norm_cnts) = rownames(coldata)
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
outdir<-"./output_xingyu/"
colnames(norm_cnts) = rownames(coldata)
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
outnames<-c('Sub1 vs. Sub2','Responder vs. non-responder','Responder vs. non-responder on sub1 ')
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
grp.idx<-rep(c("RACT","RA"),4)
ind.idx<-rep(c('1','2','3','4'),c(2,2,2,2))
grp.idx
ind.idx
setwd("C:/Users/xysheep/OneDrive/MyProject/RNAseq_HARA")
source('func_RNAseq_report.R')
load("gnCnt.RData")
hnrnp.cnts = assay(gnCnt)
cnts=hnrnp.cnts
cnts=cnts[,5:12]
grp.idx<-rep(c("RACT","RA"),4)
ind.idx<-rep(c('1','2','3','4'),c(2,2,2,2))
RA_RActl<-analysis_deg(cnts, grp.idx,ind.idx, 'paired')
outdir_glist
source('make_preranked.R')
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
dev.off()
dev.off()
colnames(norm_cnts) = rownames(coldata)
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
used_gene_idx =used_gene_idx1
deg_norm_cnts<-norm_cnts[used_gene_idx,]
deg_norm_cnts<-data.frame(deg_norm_cnts)
text_label<-c(names(deg_norm_cnts))
names(deg_norm_cnts)<-text_label
set.seed(9464)
tsne_results1<-Rtsne(t(deg_norm_cnts),perplexity=2)
tsne_cnts1<-tsne_results1$Y
plot(tsne_cnts1[,1],tsne_cnts1[,2],col=as.factor(rownames(pca)),cex=3,pch=plotshape,main='tSNE',xlab='tSNE1',ylab='tSNE2')
tsne_cnts1
as.factor(rownames(pca))
plot(tsne_cnts1[,1],tsne_cnts1[,2],col=as.factor(rownames(pca)),cex=3,pch=plotshape,main='tSNE',xlab='tSNE1',ylab='tSNE2')
names(deg_norm_cnts)<-text_label
set.seed(9464)
tsne_results1<-Rtsne(t(deg_norm_cnts),perplexity=2)
tsne_cnts1<-tsne_results1$Y
plot(tsne_cnts1[,1],tsne_cnts1[,2],col=as.factor(rownames(pca)),cex=3,pch=22,main='tSNE',xlab='tSNE1',ylab='tSNE2')
text(tsne_cnts1[,1],tsne_cnts1[,2]-0.025,text_label,cex=0.75)
colnames(norm_cnts) = rownames(coldata)
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
draw_samplecluster<-function(used_gene_idx,norm_cnts,title){
deg_norm_cnts<-norm_cnts[used_gene_idx,]
deg_norm_cnts<-data.frame(deg_norm_cnts)
## PCA
pca_cnts<-prcomp(deg_norm_cnts,na.action=na.omit)
pca<-pca_cnts$rotation
text_label<-c(names(deg_norm_cnts))
plot(pca[,1],pca[,2],col=as.factor(rownames(pca)),cex=3,pch=22,main=title,xlab='PC1',ylab='PC2')
text(pca[,1],pca[,2]-0.025,text_label,cex=0.75)
## Rtsne
names(deg_norm_cnts)<-text_label
set.seed(9464)
tsne_results1<-Rtsne(t(deg_norm_cnts),perplexity=2)
tsne_cnts1<-tsne_results1$Y
plot(tsne_cnts1[,1],tsne_cnts1[,2],col=as.factor(rownames(pca)),cex=3,pch=22,main='tSNE',xlab='tSNE1',ylab='tSNE2')
text(tsne_cnts1[,1],tsne_cnts1[,2]-0.025,text_label,cex=0.75)
}
colnames(norm_cnts) = rownames(coldata)
for (i in 1:length(q)){
pdf(paste(outdir,outnames[i],'.pdf',sep=''))
used_gene_idx1 <- (!is.na(q[[i]]) & q[[i]]<fdr)
draw_samplecluster(used_gene_idx1,norm_cnts,outnames[i])
draw_heatmap(used_gene_idx1,norm_cnts,outnames[i])
dev.off()
}
source('C:/Users/xysheep/OneDrive/MyProject/RNAseq_share/main.R', echo=TRUE)
length(q[[1]])
q[[1]]
dim(q[[1]])
dim(norm_cnts)
draw_samplecluster(1:dim(norm_cnts)[[1]],norm_cnts,'all')
source("https://bioconductor.org/biocLite.R")
biocLite("TxDb.Hsapiens.UCSC.hg19.lincRNAsTranscripts")
